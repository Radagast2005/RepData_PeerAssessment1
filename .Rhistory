library(tcltk)
demo(tckcanvas)
demo(tkcanvas)
exit
x<- log(2.843432) *p1
x<- log(2.843432) *pi
x
x <- 1:4
y <- 2:3
x+y
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x > 10] == 4
x[x == 4] > 10
x
x[x >= 11] <- 4
data <- readcsv(C:\Data\RCursus\hw1_data.csv)
data <- readcsv(C:/Data/RCursus/hw1_data.csv)
data <- readcsv("C:\Data\RCursus\hw1_data.csv")
data <- readcsv("C:/Data/RCursus/hw1_data.csv")
data <- read.table("C:/Data/RCursus/hw1_data.csv")
data <- readcsv("C:/Data/RCursus/hw1_data.csv")
data <- read.table("C:/Data/RCursus/hw1_data.csv")
data <- read.table("C:/Data/RCursus/hw1_data.csv")
hw1_data <- read.csv("C:/Data/RCursus/hw1_data.csv")
View(hw1_data)
data <- hw1_data
data[2]
data[1:2]
data
data[1:2,]
data[152:153,]
data[47,]
data[1]
is.na(data[1])
sum(is.na[data[1]])
sum(is.na([data[1]))
sum(is.na(data[1]))
mean(complete.cases(data[1]))
ozone <- data[1]
ozonegood <- complete.cases(ozone)
mean(ozone[ozonegood,])
ozone>31
ozoneboven31 <- ozone>31
tempboven90 <- data[4]>90
mean(data[2,ozoneboven31,tempboven90,])
solar <- data[2]
mean(solar[ozoneboven31, tempboven90,])
mean(solar[ozoneboven31,])
solar[ozoneboven31,]
solar[ozoneboven31,][tempboven90,]
solar[ozoneboven31,tempboven90,]
solar[tempboven90,]
solar[solar[tempboven90,],ozoneboven31,]
ozoneboven31+tempboven90
ozoneboven31+tempboven90==2
mean(solar[ozoneboven31+tempboven90==2,])
solar[ozoneboven31+tempboven90==2,]
complete.cases(solar[ozoneboven31+tempboven90==2,])
mean(solar[complete.cases(solar[ozoneboven31+tempboven90==2,])
],)
solar[complete.cases(solar[ozoneboven31+tempboven90==2,])
]
solar[complete.cases(solar[ozoneboven31+tempboven90==2,])
,]
mean(solar[complete.cases(solar[ozoneboven31+tempboven90==2,])
,])
data[1]>31
data[1]>31, data[4]>90
c(data[1]>31, data[4]>90)
data[ozoneboven31][tempboven90]
data[ozoneboven31][tempboven90][2]
solar[ozoneboven31][tempboven90]
solar[ozoneboven31][tempboven90]
solargood <- complete.cases(solar[ozoneboven31][tempboven90])
solar[ozoneboven31][tempboven90][solargood]
mean(solar[ozoneboven31][tempboven90][solargood])
ozoneboven31
ozonegood + solargood==2
ozoneboven31 + tempboven90==2
mean(solar[ozoneboven31][tempboven90][solargood])
data[5]==6
mean(data[4]data[5]==6)
mean(data[4],data[5]==6)
data[4]data[5]
mean(data[4,]data[5]==6)
june <- data[5]==6
mean(data[4,][june,])
data[4,][june,]
data[4,]
data[4]
data[4][june,]
mean(data[4][june,])
max(data[1][data[5]==5,])
mei <- data[5]==5
max(data[1][mei,)
max(data[1][mei,])
max(data[1][mei,][ozonegood,])
is.na(data[1])
is.na(data[1])
!is.na(data[1])
ozonegood <-!is.na(data[1])
max(data[1][mei,][ozonegood,])
meigood <- [mei]+[ozonegood]==2
meigood <- mei+ozonegood==2
max(data[1][meigood,])
load("C:/Users/Edwin/Google Drive/Documenten/Coursera/Repository/HelloWorld.md")
install.packages("slidify")
install.packages("ggplot2")
install.packages("devtools")
install.packages("swirl")
library("swirl")
swirl()
5+7
x <- 5+7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z /my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
read.csv("C:\Users\Edwin\Google Drive\Documenten\Coursera\R Programming\rprog-data-quiz1_data\hw1_data.csv")
read.csv(C:\Users\Edwin\Google Drive\Documenten\Coursera\R Programming\rprog-data-quiz1_data\hw1_data.csv)
read.csv("C:\\Users\\Edwin\\Google Drive\\Documenten\\Coursera\\R Programming\\rprog-data-quiz1_data\\hw1_data.csv")
read.csv("C:\\Users\\Edwin\\Google Drive\\Documenten\\Coursera\\R Programming\\rprog-data-quiz1_data\\hw1_data.csv") <- x
x <- read.csv("C:\\Users\\Edwin\\Google Drive\\Documenten\\Coursera\\R Programming\\rprog-data-quiz1_data\\hw1_data.csv")
x[x[2]]
x[2]
head(x, 2)
tail(x,2)
tail(head(x,47),1)
x[1]
is.na(x[1])
is.na(x[1])==TRUE
missing_ozone <- complete.cases(x[1],is.na(x[1]))
missing_ozone
missing_ozone[TRUE]
is.na(x[1])
table(x[1])
x[1]
ozone_table <- table(x[1])
ozone_table(names(ozone_table)>=1)
ozone_table[names(ozone_table)>=1]
rm(list=ls())
x <- read.csv("C:\\Users\\Edwin\\Google Drive\\Documenten\\Coursera\\R Programming\\rprog-data-quiz1_data\\hw1_data.csv")
x[1]
!complete.cases(x[1],)
!complete.cases(x[1])
!na.omit(x[1])
length(!na.omit(x[1]))
length(na.omit(x[1]))
mean(x[1])
mean(x[1], na.rm = TRUE)
x[1]
mean(na.omit(x[1]))
x <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
summary(x)
class(x)
head(x[x$VAL])
head(,x[x$VAL])
head(x[,x$VAL])
rep(x$VAL)
rep(x$VAL, nrow(x))
?rep
?names
names(x$VAL)
library(plyr)
count(x, 'VAL')
?readxlsx
?read.xlsx
colindex <- c(7:15)
rowindex <- c(18:23)
dat <- read.xlsx("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", sheetindex=1, colIndex = colindex, rowIndex = rowindex)
library(xlsx)
install.packages("xlsx")
library(xlsx)
dat <- read.xlsx("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", sheetindex=1, colIndex = colindex, rowIndex = rowindex)
dat <- read.xlsx("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", sheetIndex=1, colIndex = colindex, rowIndex = rowindex)
dat <- read.xlsx("C:\\Users\Edwin\\Google Drive\\Documenten\\Coursera\\Getting And Cleaning Data\\getdata-data-DATA.gov_NGAP.xlsx", sheetIndex=1, colIndex = colindex, rowIndex = rowindex)
dat <- read.xlsx("C:\\Users\\Edwin\\Google Drive\\Documenten\\Coursera\\Getting And Cleaning Data\\getdata-data-DATA.gov_NGAP.xlsx", sheetIndex=1, colIndex = colindex, rowIndex = rowindex)
sum(dat$Zip*dat$Ext,na.rm=T)
library(xml)
install.packages("xml")
install.packages("XML")
library(XML)
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal = TRUE)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(url, useInternal = TRUE)
doc <- xmlTreeParse(url)
?xmlTreeParse
docx <- xmlToDataFrame(url)
urlcsv <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
?fread
library(csv)
library(data.table)
install.packages("data.table")
library(data.table)
?fread
dt <- fread(urlcsv)
DT <- dt
sapply(split(DT$pwgtp15,DT$SEX),mean)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
DT[,mean(pwgtp15),by=SEX]
mean(DT$pwgtp15,by=DT$SEX)
tapply(DT$pwgtp15,DT$SEX,mean)
doc <- xmlTreeParse("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal = TRUE)
rootNode <- xmlRoot(doc)
names(rootNode)
xpathSApply(rootNode, "//zipcode", xmlValue)
zip <- xpathSApply(rootNode, "//zipcode", xmlValue)
class(zip)
y <- table(zip)
y
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1",
country == "US")
?Comparison
filter(cran, r_version <= "3.0.2",
country == "IN")
filter(cran, country == "US" |
country == "IN")
filter(cran, size >100500,
r_os == "linux_gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cram3 <- select(cran, ip_id, package, size )
cran3 <- select(cran, ip_id, package, size )
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count>679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(dplyr)
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, into = c("sex", "class"))
submit()
students3
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
extract_numeric("class5")
submit()
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
submit()
?select
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("1975 maart 12")
mdy("1975 maart 12")
mdy("maart 12, 1975")
mdy("March 12, 1975")
mdy(25081985)
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hhmmss(dt1)
hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hour = hour(now()), minute = minute(now()))
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
?now
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hour=17, minute=34)
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Asia/Hong_kong")
last_time <- mdy("June 17, 2008", tz = "Signapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
last_time <- mdy("Juni 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
setwd("E:\\Google Drive\\Documenten\\Edwin\\Cursussen\\Coursera\\Repository\\RepData_PeerAssessment1")
data <- read.table(unz("activity.zip", "activity.csv"))
data <- read.csv(unz("activity.zip", "activity.csv"))
head(data)
head(data,20)
steps_per_day <- aggregate(steps ~ date, data=data, FUN=sum)
head(steps_per_day)
class(data)
summary(data)
str(data)
data$date <- as.Date(data$date , "%y-%m-%d")
str(data)
head(data)
activity <- read.csv(unz("activity.zip", "activity.csv"))
as.Date(activity$date, "%Y-%m-%d")
activity$date <- as.Date(activity$date, "%Y-%m-%d")
str(activity)
barplot( aggregate(steps ~ date, data=activity, FUN=sum))
steps_per_day <- aggregate(steps ~ date, data=activity, FUN=sum)
barplot(steps_per_day)
barplot(steps_per_day, xlab="date", ylab="steps")
barplot(steps_per_day$steps, xlab="date", ylab="steps")
barplot(steps_per_day$steps, xlab="date", ylab="steps", names.arg = steps_per_day$date)
mean(steps_per_day$steps)
steps_per_interval <- aggregate(steps ~ interval, data=activity, FUN=mean)
plot(steps ~interval, steps_per_interval, type="l")
source('~/.active-rstudio-document', echo=TRUE)
sum(complete.cases(activity))
sum(!complete.cases(activity))
sum(is.na(activity))
is.na(activity)
head(activity)
head(steps_per_interval)
tail(activity,15)
activity[is.na(activity),]
merged_activity <- merge(activity, steps_per_interval, by="interval")
head(merged_activity)
head(merged_activity,20)
merged_activity[is.na(merged_activity$steps.x), merged_activity$steps.x]
merged_activity[is.na(merged_activity$steps.x), 2]
merged_activity[is.na(merged_activity$steps.x), 2] <- merged_activity$steps.y
merged_activity[is.na(merged_activity$steps.x), 2] <- merged_activity[is.na(merged_activity$steps.x), 4]
head(merged_activity)
new_activity <- merged_activity[1:3,]
new_activity <- merged_activity[,1:3]
new_steps_per_day <- aggregate(steps.x ~ date, data=new_activity, FUN=sum)
mean(new_steps_per_day$steps.x)
median(new_steps_per_day$steps.x)
weekdays(new_activity$date)
?weekdays
weekdays(new_activity$date)==1
isWeekday(new_activity$date)
isWeekday(new_activity$date)
library(lubridate)
wday(new_activity$date)
wday(new_activity$date) %in% c(6,7)
weekend_test <- wday(new_activity$date) %in% c(6,7)
ifelse(wday(new_activity$date) %in% c(6,7),"Weekend", "Weekday")
new_activity$dayType <- ifelse(wday(new_activity$date) %in% c(6,7),"Weekend", "Weekday")
par(mfrow = c(1,2))
new_activity_weekday <- filter(new_activity, new_activity$dayType="Weekday")
new_activity_weekday <- filter(new_activity, new_activity$dayType=="Weekday")
new_activity_weekday <- new_activity[new_activity$dayType=="Weekday",]
new_activity_weekday <- new_activity[new_activity$dayType=="Weekend",]
new_activity_weekday <- new_activity[new_activity$dayType=="Weekday",]
